[buildout]
extends = http://dist.plone.org/release/4.3-latest/versions.cfg
parts = sphinx-build robot pybot
versions = versions
develop = .
extensions = mr.developer
sources = sources
find-links =
    https://github.com/datakurre/robotframework/tarball/2.8.2rc0/robotframework-2.8.2rc0.tar.gz

[sources]
plone.app.robotframework = git git://github.com/plone/plone.app.robotframework
robotframework-selenium2screenshots = git git://github.com/datakurre/robotframework-selenium2screenshots
sphinxcontrib-robotframework = git git://github.com/datakurre/sphinxcontrib_robotframework

[versions]
Sphinx = 1.2b2
selenium = 2.35.0
robotsuite = 1.4.0
robotframework = 2.8.2rc0
robotframework-selenium2library = 1.4.0
sphinxcontrib-robotframework = 0.4.2

[sphinx-build]
recipe = zc.recipe.egg
eggs =
    Sphinx
    collective.usermanual
initialization =
    # This activates standalone setup, which bootstraps Plone within Sphinx:
    import shutil
    from os.path import join
    path = join('${buildout:directory}', 'source')
    shutil.copy(join(path, 'robot-standalone.rst'), join(path, 'robot.rst'))
scripts =
    sphinx-build=sphinx-build

[robot]
recipe = zc.recipe.egg
eggs =
    Sphinx
    collective.usermanual
    plone.app.robotframework
initialization =
    # This activates robot-server, which uses robot-server Plone with Sphinx:
    import shutil
    from os.path import join
    path = join('${buildout:directory}', 'source')
    shutil.copy(join(path, 'robot-server.rst'), join(path, 'robot.rst'))
scripts =
    robot-server
    sphinx-build=robot-sphinx

[pybot]
recipe = zc.recipe.egg
eggs =
    collective.usermanual
    plone.app.robotframework
initialization =
    # This code hides warnings for missing Sphinx-only-directives:
    from docutils.parsers.rst.directives import register_directive
    from docutils.parsers.rst.roles import register_local_role
    dummy_directive = lambda *args: []
    options = ('maxdepth', 'creates', 'numbered', 'hidden')
    setattr(dummy_directive, 'content', True)
    setattr(dummy_directive, 'options', dict([(opt, str) for opt in options]))
    register_directive('toctree', dummy_directive)
    register_directive('robotframework', dummy_directive)
    register_local_role('ref', dummy_directive)
scripts =
    pybot
